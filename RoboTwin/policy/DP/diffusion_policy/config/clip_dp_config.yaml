# CLIP集成DP的配置文件
# 基于原始的robot_dp_16.yaml，但使用CLIP作为图像编码器

defaults:
  - _self_
  - task: default_task_16

name: clip_robot_${task.name}
_target_: diffusion_policy.workspace.robotworkspace.RobotWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "clip_integration"

horizon: 8
n_obs_steps: 3
n_action_steps: 6
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_global_cond: True

policy:
  _target_: diffusion_policy.policy.diffusion_unet_image_policy.DiffusionUnetImagePolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    variance_type: fixed_small
    clip_sample: True
    prediction_type: epsilon

  # 关键修改：使用CLIP作为观测编码器
  obs_encoder:
    _target_: clip_dp_integration.CLIPMultiImageObsEncoder
    shape_meta: ${shape_meta}
    
    # CLIP相关配置
    clip_model_name: "ViT-B/32"  # 可选: ViT-B/32, ViT-B/16, ViT-L/14
    clip_layer: 11               # 使用第11层的特征 (0-11)
    use_final_features: False    # False=使用中间层特征, True=使用最终特征
    feature_dim: 512            # 输出特征维度
    freeze_clip: True           # 是否冻结CLIP参数
    
    # 图像预处理配置
    share_rgb_model: False      # 是否共享RGB模型
    resize_shape: [224, 224]    # CLIP标准输入尺寸
    imagenet_norm: True         # 使用ImageNet归一化

  horizon: ${horizon}
  n_action_steps: ${eval:'${n_action_steps}+${n_latency_steps}'}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  obs_as_global_cond: ${obs_as_global_cond}
  diffusion_step_embed_dim: 128
  down_dims: [256, 512, 1024]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64              # 可能需要减小batch size，因为CLIP更大
  num_workers: 4
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 64
  num_workers: 4
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 5.0e-5                   # 可能需要更小的学习率
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  lr_scheduler: cosine
  lr_warmup_steps: 1000        # 更长的warmup
  num_epochs: 800              # 可能需要更多epochs
  gradient_accumulate_every: 2  # 梯度累积
  use_ema: True
  freeze_encoder: False        # 如果freeze_clip=True，这个可以是False
  rollout_every: 50
  checkpoint_every: 300
  val_every: 1
  sample_every: 5
  max_train_steps: null
  max_val_steps: null
  tqdm_interval_sec: 1.0

logging:
  project: clip_diffusion_policy
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}", "clip"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}

setting: null
expert_data_num: null
head_camera_type: null